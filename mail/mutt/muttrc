# ~/.muttrc file by luc {{{1
# vim: foldmethod=marker

# This file will actually reside in ~/.mutt/muttrc
# ...
#
# Recources:
#

# basic setup {{{1

# maildir options {{{2
set mbox_type = Maildir
set folder    = ~/mail
set spoolfile = +inbox
set mbox      = +old
#set record    = +sent
set record    = +inbox
set postponed = +draft
#set mask = '!^\.[^.]'
#set force_name

# sourcing private definitions {{{2
source ~/.mutt/private

# mailboxes {{{2

# mailboxes which might contain new mail
mailboxes +inbox
mailboxes +sammersee/current
mailboxes +lists/grillchill
mailboxes +lists/tanzhans
mailboxes +lists/jongl-muenchen
mailboxes +uni/mathe
mailboxes +uni/lmu
mailboxes +uni/ifi
mailboxes +uni/philosophie
mailboxes +uni/rewi
mailboxes +landheim
mailboxes +gmx
#mailboxes /var/mail/lucas
#mailboxes /var/mail/luc
mailboxes +system-mailbox

# other mailboxes
mailboxes +aikido
mailboxes +booklooker
mailboxes +computer
mailboxes +congstar
mailboxes +draft
mailboxes +gmx
mailboxes +gruppen/jongleure
mailboxes +gruppen/mathematiker
mailboxes +gruppen/physiker
mailboxes +gruppen/rewis
mailboxes +gsc
mailboxes +jonglieren
mailboxes +login
mailboxes +old
mailboxes +sent
mailboxes +wg

# sorting email {{{2
reply-hook ".*" set record = "^"
set reply_regexp = "^((re([\[0-9\]+])*|aw|antw\.):[ \t]*)+"

#save-hook . +inbox

# changing display for some special folders {{{2
folder-hook .                      "source ~/.mutt/hooks/default"
folder-hook +\(lists/\)?grillchill "source ~/.mutt/hooks/grillchill"
folder-hook +\(lists/\)?sammersee  "source ~/.mutt/hooks/sammersee"
folder-hook +lists/.*              "source ~/.mutt/hooks/lists"

# gpg settings {{{1

#source ~/.mutt/gpg2.rc

# internet recources {{{2
# https://wiki.archlinux.org/index.php/Mutt#Passwords_management
# http://codesorcery.net/old/mutt/mutt-gnupg-howto
# http://dev.mutt.org/trac/wiki/MuttGuide/UseGPG

# head of the example file gpg.rc {{{2
# Command formats for gpg.
#
# %p    The empty string when no passphrase is needed,
#       the string "PGPPASSFD=0" if one is needed.
#
#       This is mostly used in conditional % sequences.
#
# %f    Most PGP commands operate on a single file or a file
#       containing a message.  %f expands to this file's name.
#
# %s    When verifying signatures, there is another temporary file
#       containing the detached signature.  %s expands to this
#       file's name.
#
# %a    In "signing" contexts, this expands to the value of the
#       configuration variable $pgp_sign_as.  You probably need to
#       use this within a conditional % sequence.
#
# %r    In many contexts, mutt passes key IDs to pgp.  %r expands to
#       a list of key IDs.

# Note that we explicitly set the comment armor header since GnuPG, when used
# in some localiaztion environments, generates 8bit data in that header, thereby
# breaking PGP/MIME.

# options mostly taken from the example file {{{2

# user variables for gpg {{{3
set my_gpg = "gpg2 --batch --quiet --output - --status-fd=2 %?p?--passphrase-fd=0?"
# --no-verbose
set my_sign_opts = "--armor --textmode %?a?--local-user %a?"
set my_encrypt_opts = "--encrypt --armor --textmode --always-trust --encrypt-to $pgp_sign_as"

# reciving pgp stuff {{{3
# decode application/pgp
set pgp_decode_command = "$my_gpg %f"

# verify a pgp/mime signature
set pgp_verify_command = "$my_gpg --verify %s %f"

# decrypt a pgp/mime attachment
set pgp_decrypt_command = "$my_gpg %f"

# creating pgp stuff {{{3
# create a pgp/mime signed attachment
set pgp_sign_command = "$my_gpg $my_sign_opts --detach-sign %f"

# create a application/pgp signed (old-style) message
set pgp_clearsign_command = "$my_gpg $my_sign_opts --clearsign %f"

# create a pgp/mime encrypted attachment
set pgp_encrypt_only_command = "pgpewrap $my_gpg $my_encrypt_opts -- -r %r -- %f"

# create a pgp/mime encrypted and signed attachment
set pgp_encrypt_sign_command = "pgpewrap $my_gpg $my_encrypt_opts --sign -- -r %r -- %f"

# key management {{{3
# import a key into the public key ring
set pgp_import_command = "$my_gpg --import -v %f"

# export a key from the public key ring
set pgp_export_command = "$my_gpg --export --armor %r"

# verify a key
set pgp_verify_key_command = "$my_gpg --verbose --fingerprint --check-sigs %r"

# read in the public key ring
set pgp_list_pubring_command = "$my_gpg --with-colons --list-keys %r"

# read in the secret key ring
set pgp_list_secring_command = "$my_gpg --with-colons --list-secret-keys %r"

# fetch keys
# set pgp_getkeys_command = "pkspxycwrap %r"

# pattern for good signature - may need to be adapted to locale! {{{3

# set pgp_good_sign = "^gpgv?: Good signature from "

# OK, here's a version which uses gnupg's message catalog:
# set pgp_good_sign = "`gettext -d gnupg -s 'Good signature from "' | tr -d '"'`"

# it's a regexp used against the GPG output: if it matches some line of the
# output then mutt considers the message a good signed one (ignoring the GPG
# exit code)
#
# This version uses --status-fd messages
#set pgp_good_sign = "^\\[GNUPG:\\] GOODSIG"
set pgp_good_sign = "^gpg: Good signature from"

# auto stuff {{{3
set crypt_autosign = yes
set crypt_replyencrypt = yes
#set crypt_use_gpgme = yes
set pgp_use_gpg_agent = yes

# timeout {{{3
# this set the number of seconds to keep in memory the passpharse used to
# encrypt/sign the more the less secure it will be
set pgp_timeout = 0

# header {{{3
my_hdr X-PGP-Key: 0x001A41A1 http://luc42.lima-city.de/files/public.asc

# other stuff {{{1
set edit_headers
set use_envelope_from
#folder-hook . "exec collapse-all"
set send_charset = us-ascii:utf-8
set certificate_file = ~/.mutt/certificates
set editor = "transparent-gvim.sh --tab '+call LucRemoteEditor(1)'"
set history_file = ~/.mutt/history
set save_history = 100
set history = 100
set beep_new
set include = yes

mime_lookup application/save-as


# alias configuration {{{1
set alias_file    = ~/.mutt/aliases
set query_command = "apple-addressbook-for-mutt.sh '%s'"
source $alias_file

# appearance {{{1

# colors {{{2
#source ~/.mutt/color/plain
source ~/.mutt/color/for-solarized-terminal
macro index,pager <esc><space> ":source ~/.mutt/color/colorful<return>"
macro index,pager <esc><tab>   ":source ~/.mutt/color/plain<return>"


# format for displaying {{{2

# the default is index_format is "%4C %Z %{%b %d} %-15.15L (%?l?%4l&%4c?) %s"
# these variables will be used by the hooks
set my_index_format_1 = "%4C %Z %{%b %d %R}"
set my_index_format_2 = "(%?l?%4l&%4c?) %s"

# We save the default status format for usage in the profile switching files.
set my_default_status_format = $status_format

#set pager_context = 1
#set menu_context  = 1
#set index_format  = "%4C %Z %{%b %d} %-20.20n %-20.20t (%?l?%4l&%4c?) %s"
set sort          = threads
set sort_aux      = last-date-received
set sort_browser  = unsorted
auto_view text/html
alternative_order text/plain text/html

# sidebar {{{2
set sidebar_width = 24
set sidebar_sort = yes
set sidebar_shortpath = yes
set sidebar_folderindent = yes
source ~/.mutt/switches/sidebar-on

# last steps {{{1
source ~/.mutt/profiles/webde
